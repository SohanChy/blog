<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gists on Sohan&#39;s Blog</title>
    <link>/tags/gists/index.xml</link>
    <description>Recent content in Gists on Sohan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Sohan Chowdhury, all rights reserved.</copyright>
    <atom:link href="/tags/gists/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SPV - A port of C&#43;&#43; STL vectors for C</title>
      <link>/projects/SPV-A-port-of-C-plus-plus-STL-vectors-for-C/</link>
      <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/projects/SPV-A-port-of-C-plus-plus-STL-vectors-for-C/</guid>
      <description>&lt;p&gt;I tried to port the vector container from C++ STL to C.
Its just a header file called spv.h and almost all features of C++ vectors can now be used in C just by including it.
SPV arrays support resize, insert, remove, push_back, push_front, pop_back, pop_front, sort , swap, etc.&lt;/p&gt;

&lt;p&gt;For more information visit the project page at &lt;a href=&#34;http://sohanchy.github.io/SPV-for-C/&#34;&gt;http://sohanchy.github.io/SPV-for-C/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to write a simple program to check prime numbers in C</title>
      <link>/code/how-to-write-a-program-to-check-prime-numbers-in-c/</link>
      <pubDate>Sun, 26 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/code/how-to-write-a-program-to-check-prime-numbers-in-c/</guid>
      <description>&lt;p&gt;I find Prime finding &amp;amp; prime checking interesting because it introduces the concept of translating mathematical logic to programming logic.
While writing this you also learn by hand how to do little tweaks and improvements to make a program better. After seeing this program, anyone who wishes to learn more should write a program to print all prime numbers from 1-n by adapting the logic used in this program in a loop.
Here&amp;rsquo;s my simple approach to writing a program to find prime numbers in C.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;

int main(void) {
    int input,binary=0,x;

//Take and see if input is a positive number
    do {
        printf(&amp;quot;Please enter POSITIVE a number:&amp;quot;);
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;input);}
    while(input&amp;lt;0);

    x=input;

//Convert to binary
//Using 0 causes problems, so using 9 instead of 0
    while(x!=0)
    {
        binary=binary*10;
        if(x%2==1){
        binary=binary+1;
        }
        if(x%2==0){
        binary=binary+9;
        }

        x=x/2;
    }

//Its in binary but its reversed
//The 0s are in 0 we need to fix that as well
//reverse and replace here
int temp=binary,reverse=0,y;
    while(temp!=0)
    {
        y=temp%10;
        if(y==9){y=0;}
        reverse=(reverse*10)+y;
        temp=temp/10;
    }


//Print the result
    printf(&amp;quot;\n\t\t\t%d&amp;quot;,reverse);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The gist can be found at &lt;a href=&#34;https://gist.github.com/SohanChy/bff3490f203b91c5284e&#34;&gt;https://gist.github.com/SohanChy/bff3490f203b91c5284e&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to printf a upside down star pyramid in C</title>
      <link>/code/print-upside-down-star-pyramid-in-c/</link>
      <pubDate>Sun, 28 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/code/print-upside-down-star-pyramid-in-c/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s my approach to this beginner problem.
Nested loops are used to format the pyramids print structure. This problem is basically taught to get students used to basic &lt;strong&gt;nested loops&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main()
{
    int input;
    do {
        printf(&amp;quot;ODD input please: &amp;quot;);
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;input);
    }
    while (input%2==0);


    int x;
    for(x=input;x&amp;gt;0;x=x-2)
    {
        printf(&amp;quot;\t\t\t&amp;quot;);
        int j=input-x;;
        while(j&amp;gt;0)
            {
        printf(&amp;quot; &amp;quot;);
            j=j-2;
            }

        int i;
        for(i=x;i&amp;gt;0;i=i-1)
            {
        printf(&amp;quot;*&amp;quot;);
            }
        printf(&amp;quot;\n&amp;quot;);
    }

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The gist is hosted here:
&lt;a href=&#34;https://gist.github.com/2161158a9e2ee06a1eda&#34;&gt;https://gist.github.com/2161158a9e2ee06a1eda&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to write a program Convert Numbers to Binary in C</title>
      <link>/code/program-to-convert-numbers-to-binary-in-c/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/code/program-to-convert-numbers-to-binary-in-c/</guid>
      <description>&lt;p&gt;Here is my very basic my approach to this problem.
This program converts numbers to binary in C using simple basic C concepts. I guess this problem is supposed to teach how to &lt;strong&gt;work around&lt;/strong&gt; a limitation/quirk when programming, and basically encourages to think a bit differently.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;

int main(void) {
    int input,binary=0,x;

//Take and see if input is a positive number
    do {
        printf(&amp;quot;Please enter POSITIVE a number:&amp;quot;);
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;input);}
    while(input&amp;lt;0);

    x=input;

//Convert to binary
//Using 0 causes problems, so using 9 instead of 0
    while(x!=0)
    {
        binary=binary*10;
        if(x%2==1){
        binary=binary+1;
        }
        if(x%2==0){
        binary=binary+9;
        }

        x=x/2;
    }

//Its in binary but its reversed
//The 0s are in 0 we need to fix that as well
//reverse and replace here
int temp=binary,reverse=0,y;
    while(temp!=0)
    {
        y=temp%10;
        if(y==9){y=0;}
        reverse=(reverse*10)+y;
        temp=temp/10;
    }


//Print the result
    printf(&amp;quot;\n\t\t\t%d&amp;quot;,reverse);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gist at &lt;a href=&#34;https://gist.github.com/SohanChy/bff3490f203b91c5284e&#34;&gt;https://gist.github.com/SohanChy/bff3490f203b91c5284e&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>