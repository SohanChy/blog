<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Sohan&#39;s Blog</title>
    <link>/tags/c/</link>
    <description>Recent content in C on Sohan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Sohan Chowdhury, all rights reserved.</copyright>
    <lastBuildDate>Sat, 13 Feb 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to setup latest SFML 2.3.2 with Codeblocks</title>
      <link>/guides-tuts/how-to-setup-sfml-232-with-codeblocks/</link>
      <pubDate>Sat, 13 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/guides-tuts/how-to-setup-sfml-232-with-codeblocks/</guid>
      <description>

&lt;p&gt;This post is for beginners who want use the Simple Fast Media Library(SFML) for C++ in the popular IDE CodeBlocks. It is a simple step by step guide with screenshots that covers from downloading, creating a project, setting it up with SFML and then linking the DLLs to running your first SFML code.&lt;/p&gt;

&lt;h2 id=&#34;downloading&#34;&gt;Downloading:&lt;/h2&gt;

&lt;p&gt;First head over to &lt;a href=&#34;http://www.sfml-dev.org/download.php&#34;&gt;http://www.sfml-dev.org/download.php&lt;/a&gt; and download the
latest stable version of SFML. As I am writing this, the latest stable
version is &lt;strong&gt;SFML 2.3.2.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;For CodeBlocks on Windows, the proper version is usually &lt;strong&gt;GCC 4.7.1
TDM (SJLJ) - 32-bit&lt;/strong&gt;
On Linux, it is usually &lt;strong&gt;GCC 4.7.1 TDM (SJLJ) - 64-bit&lt;/strong&gt; (on Ubuntu)&lt;/p&gt;

&lt;p&gt;Download the proper zip file and extract it using 7-Zip or Winrar or any
other archive manager of your choice. Inside the extracted folder you
will find a folder named &lt;strong&gt;SFML-2.3.2.&lt;/strong&gt;
This is our library. So remember this folder, we will be needing it.&lt;/p&gt;

&lt;h2 id=&#34;setup-the-codeblocks-project&#34;&gt;Setup the Codeblocks project:&lt;/h2&gt;

&lt;p&gt;Now open Codeblocks and go to
&lt;strong&gt;Create a new project &amp;gt; Console Application &amp;gt; C++&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Give your project a title and create it in a folder of your choice.&lt;/strong&gt;
But remember where the folder is. Suppose we create it in a folder
called &lt;strong&gt;My Code.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now build and run the project to see if the hello world application
works, this is just to make sure that your codeblocks is working
properly and has a compiler.&lt;/p&gt;

&lt;p&gt;Now remember our extracted &lt;strong&gt;SFML 2.3.2&lt;/strong&gt; folder? Copy it to the &lt;strong&gt;My
Code&lt;/strong&gt; folder or whatever folder you created the project in.&lt;/p&gt;

&lt;p&gt;Now go back to CodeBlocks and find the &lt;strong&gt;Management panel&lt;/strong&gt; on the
left(usually) and on the &lt;strong&gt;project&lt;/strong&gt; tab, right click your project name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now, usually debug is pre-selected at this stage, so click on your
project name to select it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image3.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;Search&lt;/strong&gt; &lt;strong&gt;Directories &amp;gt; Compiler&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now Click Add and go to our SFML 2.3.2 folder,&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image5.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Then select the Include folder inside and click ok.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image6.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now go to Go to &lt;strong&gt;Search&lt;/strong&gt; &lt;strong&gt;Directories &amp;gt; Linker.&lt;/strong&gt; And this time
select the &lt;strong&gt;lib&lt;/strong&gt; folder and click ok.&lt;/p&gt;

&lt;p&gt;Now your project should look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now select &lt;strong&gt;debug&lt;/strong&gt; under your project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;Linker Settings.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now &lt;strong&gt;this is for DEBUG&lt;/strong&gt;, so the files &lt;strong&gt;will have a –d&lt;/strong&gt; in the
end.
Add the files&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;libsfml-graphics-d.a&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;libsfml-window-d.a&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;libsfml-system-d.a&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;These are the bare minimum files. &lt;strong&gt;If you use audio, you need to add
the libsfml-audio-d.a&lt;/strong&gt; file, if you use network, add the file for
network and so on.&lt;/p&gt;

&lt;p&gt;Now it should look something like this:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image11.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now select &lt;strong&gt;Release&lt;/strong&gt; under your project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image12.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Go to &lt;strong&gt;Linker Settings.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image10.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now &lt;strong&gt;this is for RELEASE,&lt;/strong&gt; so the files will &lt;strong&gt;NOT have a –d&lt;/strong&gt; in the
end.
Add the files&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;libsfml-graphics.a&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;libsfml-window.a&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;libsfml-system.a&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;These are the bare minimum files. &lt;strong&gt;If you use audio, you need to add
the libsfml-audio.a&lt;/strong&gt; file, if you use network, add the file for
network and so on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now it should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image13.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;linking-the-dlls-important&#34;&gt;Linking the DLLS (Important!)&lt;/h2&gt;

&lt;p&gt;Now comes the tricky part.
This is the part most people seem to miss and get frustrated. We need to
link the DLL files of the SFML library to our project. There are two
ways to do this, STATIC and DYNAMIC.&lt;/p&gt;

&lt;p&gt;We will be using the DYNAMIC way as it is easier to use and update.&lt;/p&gt;

&lt;p&gt;We need to go to our SFML 2.3.2 folder and go inside the &lt;strong&gt;bin&lt;/strong&gt;
folder..&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image14.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Copy &lt;strong&gt;ALL&lt;/strong&gt; the dll files, and paste them to on your project folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/images/guides-tuts/how-to-setup-sfml-232-with-codeblocks/image15.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, you are DONE!!!&lt;/p&gt;

&lt;p&gt;Try a sample SFML code from below or any code from the SFML website and
have a blast.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include SFML/Graphics.hpp

int main()

{

// create the window

sf::RenderWindow window(sf::VideoMode(800, 600), &amp;quot;My window&amp;quot;);

//create a simple circle shape

sf::CircleShape shape(50);

// set the shape color to green

shape.setFillColor(sf::Color(100, 250, 50));

// run the program as long as the window is open

while (window.isOpen())

{

// check all the window&#39;s events that were triggered since the last
iteration of the loop

sf::Event event;

while (window.pollEvent(event))

{

// &amp;quot;close requested&amp;quot; event: we close the window

if (event.type == sf::Event::Closed)

window.close();

}

// clear the window with black color

window.clear(sf::Color::White);

// draw everything here...

// window.draw(...);

//draw the shape

window.draw(shape);

// end the current frame

window.display();

}

return 0;

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>SPV - A port of C&#43;&#43; STL vectors for C</title>
      <link>/projects/SPV-A-port-of-C-plus-plus-STL-vectors-for-C/</link>
      <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/projects/SPV-A-port-of-C-plus-plus-STL-vectors-for-C/</guid>
      <description>&lt;p&gt;I tried to port the vector container from C++ STL to C.
Its just a header file called spv.h and almost all features of C++ vectors can now be used in C just by including it.
SPV arrays support resize, insert, remove, push_back, push_front, pop_back, pop_front, sort , swap, etc.&lt;/p&gt;

&lt;p&gt;For more information visit the project page at &lt;a href=&#34;http://sohanchy.github.io/SPV-for-C/&#34;&gt;http://sohanchy.github.io/SPV-for-C/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to write a simple program to check prime numbers in C</title>
      <link>/code/how-to-write-a-program-to-check-prime-numbers-in-c/</link>
      <pubDate>Sun, 26 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/code/how-to-write-a-program-to-check-prime-numbers-in-c/</guid>
      <description>&lt;p&gt;I find Prime finding &amp;amp; prime checking interesting because it introduces the concept of translating mathematical logic to programming logic.
While writing this you also learn by hand how to do little tweaks and improvements to make a program better. After seeing this program, anyone who wishes to learn more should write a program to print all prime numbers from 1-n by adapting the logic used in this program in a loop.
Here&amp;rsquo;s my simple approach to writing a program to find prime numbers in C.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;

int main(void) {
    int input,binary=0,x;

//Take and see if input is a positive number
    do {
        printf(&amp;quot;Please enter POSITIVE a number:&amp;quot;);
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;input);}
    while(input&amp;lt;0);

    x=input;

//Convert to binary
//Using 0 causes problems, so using 9 instead of 0
    while(x!=0)
    {
        binary=binary*10;
        if(x%2==1){
        binary=binary+1;
        }
        if(x%2==0){
        binary=binary+9;
        }

        x=x/2;
    }

//Its in binary but its reversed
//The 0s are in 0 we need to fix that as well
//reverse and replace here
int temp=binary,reverse=0,y;
    while(temp!=0)
    {
        y=temp%10;
        if(y==9){y=0;}
        reverse=(reverse*10)+y;
        temp=temp/10;
    }


//Print the result
    printf(&amp;quot;\n\t\t\t%d&amp;quot;,reverse);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The gist can be found at &lt;a href=&#34;https://gist.github.com/SohanChy/bff3490f203b91c5284e&#34;&gt;https://gist.github.com/SohanChy/bff3490f203b91c5284e&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to printf a upside down star pyramid in C</title>
      <link>/code/print-upside-down-star-pyramid-in-c/</link>
      <pubDate>Sun, 28 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/code/print-upside-down-star-pyramid-in-c/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s my approach to this beginner problem.
Nested loops are used to format the pyramids print structure. This problem is basically taught to get students used to basic &lt;strong&gt;nested loops&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main()
{
    int input;
    do {
        printf(&amp;quot;ODD input please: &amp;quot;);
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;input);
    }
    while (input%2==0);


    int x;
    for(x=input;x&amp;gt;0;x=x-2)
    {
        printf(&amp;quot;\t\t\t&amp;quot;);
        int j=input-x;;
        while(j&amp;gt;0)
            {
        printf(&amp;quot; &amp;quot;);
            j=j-2;
            }

        int i;
        for(i=x;i&amp;gt;0;i=i-1)
            {
        printf(&amp;quot;*&amp;quot;);
            }
        printf(&amp;quot;\n&amp;quot;);
    }

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The gist is hosted here:
&lt;a href=&#34;https://gist.github.com/2161158a9e2ee06a1eda&#34;&gt;https://gist.github.com/2161158a9e2ee06a1eda&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to write a program Convert Numbers to Binary in C</title>
      <link>/code/program-to-convert-numbers-to-binary-in-c/</link>
      <pubDate>Mon, 22 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>/code/program-to-convert-numbers-to-binary-in-c/</guid>
      <description>&lt;p&gt;Here is my very basic my approach to this problem.
This program converts numbers to binary in C using simple basic C concepts. I guess this problem is supposed to teach how to &lt;strong&gt;work around&lt;/strong&gt; a limitation/quirk when programming, and basically encourages to think a bit differently.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;

int main(void) {
    int input,binary=0,x;

//Take and see if input is a positive number
    do {
        printf(&amp;quot;Please enter POSITIVE a number:&amp;quot;);
        scanf(&amp;quot;%d&amp;quot;,&amp;amp;input);}
    while(input&amp;lt;0);

    x=input;

//Convert to binary
//Using 0 causes problems, so using 9 instead of 0
    while(x!=0)
    {
        binary=binary*10;
        if(x%2==1){
        binary=binary+1;
        }
        if(x%2==0){
        binary=binary+9;
        }

        x=x/2;
    }

//Its in binary but its reversed
//The 0s are in 0 we need to fix that as well
//reverse and replace here
int temp=binary,reverse=0,y;
    while(temp!=0)
    {
        y=temp%10;
        if(y==9){y=0;}
        reverse=(reverse*10)+y;
        temp=temp/10;
    }


//Print the result
    printf(&amp;quot;\n\t\t\t%d&amp;quot;,reverse);

    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gist at &lt;a href=&#34;https://gist.github.com/SohanChy/bff3490f203b91c5284e&#34;&gt;https://gist.github.com/SohanChy/bff3490f203b91c5284e&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>